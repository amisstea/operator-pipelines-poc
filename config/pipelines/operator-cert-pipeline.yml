---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: operator-cert-pipeline
spec:
  params:
    - name: git_repo_url
    - name: git_repo_name
    - name: git_revision
    - name: git_refspec
    - name: git_base_revision
    - name: github_username
    - name: github_pull_request_title
    - name: github_pull_request_url
    - name: registry
      default: default-route-openshift-image-registry.apps-crc.testing
    - name: s3_bucket
      default: operator-pipeline-results
    - name: aws_secret_name
      default: aws-secret
    - name: upload_results
      default: "true"
    - name: set_github_status
      default: "true"
  workspaces:
    - name: pipeline
  tasks:
    - name: checkout
      taskRef:
        name: git-clone
        kind: ClusterTask
      params:
        - name: url
          value: $(params.git_repo_url)
        - name: revision
          value: $(params.git_revision)
        - name: refspec
          value: $(params.git_refspec)
        # The depth just needs to be large enough to include the base revision
        # so that a diff can be generated.
        - name: depth
          value: "100"
      workspaces:
        - name: output
          workspace: pipeline
          subPath: src

    - name: authorize
      runAfter:
        - checkout
      taskRef:
        name: operator-cert-authorize
      params:
        - name: github_username
          value: $(params.github_username)
        - name: git_base_revision
          value: $(params.git_base_revision)
      workspaces:
        - name: source
          workspace: pipeline
          subPath: src

    - name: run-operator-base-pipeline
      runAfter:
        - authorize
      taskRef:
        name: tkn
        kind: ClusterTask
      params:
        - name: SCRIPT
          value: |
            set -xe

            # TODO Is there a better way to setup the workspace?
            cat <<EOF >> volume-claim-template.yml
            spec:
              accessModes:
                - ReadWriteOnce
              resources:
                requests:
                  storage: 100Mi
            EOF

            # TODO Propogate results from the pipelinerun here
            TKN_OUT=$(tkn pipeline start operator-base-pipeline \
              --param git_repo_url=$(params.git_repo_url) \
              --param git_repo_name=$(params.git_repo_name) \
              --param git_revision=$(params.git_revision) \
              --param bundle_path=$(tasks.authorize.results.bundle_path) \
              --param upload_results=$(params.upload_results) \
              --param set_github_status=$(params.set_github_status) \
              --param s3_bucket=$(params.s3_bucket) \
              --param registry=$(params.registry) \
              --param aws_secret_name=$(params.aws_secret_name) \
              --workspace name=pipeline,volumeClaimTemplateFile=volume-claim-template.yml
            )

            PR=$(echo $TKN_OUT | grep "started:" | awk '{print $3}')
            tkn pr logs $PR --follow
            SUCCEEDED=$(tkn pr describe $PR -o jsonpath='{.status.conditions[?(@.type == "Succeeded")].status}')

            if [[ "$SUCCEEDED" != "True" ]]; then
              echo "$PR did not succeed"
              exit 1
            fi
    # TODO - placeholder
    - name: verify
      taskRef:
        name: sleep
      runAfter:
        - run-operator-base-pipeline
      params:
        - name: time
          value: "1"

    # TODO - placeholder
    - name: write-metadata
      taskRef:
        name: sleep
      runAfter:
        - verify
      params:
        - name: time
          value: "1"

    # TODO - placeholder
    - name: merge
      taskRef:
        name: sleep
      runAfter:
        - write-metadata
      params:
        - name: time
          value: "1"
